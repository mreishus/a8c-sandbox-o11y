diff --git a/wp-includes/class-wp-hook.php b/wp-includes/class-wp-hook.php
index 4796503dcc..a34ddf0dff 100644
--- a/wp-includes/class-wp-hook.php
+++ b/wp-includes/class-wp-hook.php
@@ -7,6 +7,37 @@
  * @since 4.7.0
  */
 
+$GLOBALS['sandbox_hook_count'] = array();
+$GLOBALS['sandbox_hook_time']  = array();
+// On a test site, we moved from 26070 measurements to 5000 measurements after these bans
+$GLOBALS['no_measure_hooks'] = [
+	'wp_cache_get_pre',
+	// Translation begin
+	'gettext',
+	'gettext_with_context',
+	'ngettext',
+	'ngettext_with_context',
+	'locale',
+	// Translation end
+	'plugins_url',
+	'option_stylesheet',
+	'set_url_scheme',
+	'block_type_metadata',
+	'block_type_metadata_settings',
+	'safe_style_css',
+	'safecss_filter_attr_allow_css',
+	'register_block_type_args',
+	'determine_locale',
+	'site_url',
+	'wpcom_is_vip',
+	'sanitize_title',
+	'default_post_metadata',
+	'render_block',
+	'pre_render_block',
+	'render_block_data',
+];
+$GLOBALS['measure_count'] = 0;
+
 /**
  * Core class used to implement action and filter hook functionality.
  *
@@ -42,6 +73,8 @@ final class WP_Hook implements Iterator, ArrayAccess {
 	 */
 	private $current_priority = array();
 
+	public $hook_name = '';
+
 	/**
 	 * Number of levels this hook can be recursively called.
 	 *
@@ -72,6 +105,7 @@ final class WP_Hook implements Iterator, ArrayAccess {
 	 * @param int      $accepted_args The number of arguments the function accepts.
 	 */
 	public function add_filter( $hook_name, $callback, $priority, $accepted_args ) {
+		$this->hook_name = $hook_name;
 		$idx = _wp_filter_build_unique_id( $hook_name, $callback, $priority );
 
 		$priority_existed = isset( $this->callbacks[ $priority ] );
@@ -292,6 +326,14 @@ final class WP_Hook implements Iterator, ArrayAccess {
 		$this->iterations[ $nesting_level ] = array_keys( $this->callbacks );
 		$num_args                           = count( $args );
 
+		$measure_hook = true;
+		if ( in_array( $this->hook_name, $GLOBALS['no_measure_hooks'] ) ) {
+			$measure_hook = false;
+		}
+		// Other possible ideas:
+		// Only measure an impactful hook:
+		// $measure_hook = $this->hook_name === 'init';
+
 		do {
 			$this->current_priority[ $nesting_level ] = current( $this->iterations[ $nesting_level ] );
 			$priority                                 = $this->current_priority[ $nesting_level ];
@@ -301,6 +343,45 @@ final class WP_Hook implements Iterator, ArrayAccess {
 					$args[0] = $value;
 				}
 
+				$measure_func = true;
+				if ( $measure_hook ) {
+					// Figure out name of the hooked function that ran
+					$f = '';
+					if ( is_string( $the_['function'] ) ) {
+						$f = $the_['function'];
+						if ( $f === '__return_true' ) {
+							$measure_func = false;
+						}
+					} elseif ( is_array( $the_['function'] ) ) {
+						$parts = [];
+						foreach ( $the_['function'] as $part ) {
+							if ( is_object( $part ) ) {
+								$parts[] = get_class( $part );
+							} else {
+								$parts[] = $part;
+							}
+						}
+						$f = implode( '->', $parts );
+					} else {
+						try {
+							$func = new ReflectionFunction( $the_['function'] );
+							$f = $func->getFileName() . ' -> ' . $func->getStartLine() . ' -> ' . $func->getName();
+						} catch ( Error $e ) {
+							$class = get_class( $the_['function'] );
+							$f = $class;
+						}
+					}
+
+					// Keep global tally of each hooked function
+					$sf = trim(preg_replace('/[^A-Za-z0-9-> _\\\\\/\.]+/', '-', $f));
+					$sf = $this->hook_name . ' => ' . $sf;
+				}
+
+				if ( $measure_hook && $measure_func ) {
+					$GLOBALS['measure_count'] += 1;
+					$start = microtime( true );
+				}
+
 				// Avoid the array_slice() if possible.
 				if ( 0 == $the_['accepted_args'] ) {
 					$value = call_user_func( $the_['function'] );
@@ -309,6 +390,39 @@ final class WP_Hook implements Iterator, ArrayAccess {
 				} else {
 					$value = call_user_func_array( $the_['function'], array_slice( $args, 0, (int) $the_['accepted_args'] ) );
 				}
+
+				if ( $measure_hook && $measure_func ) {
+					$end = microtime( true );
+					$elap = ( $end - $start ) * 1000;
+
+					if ( ! empty( $GLOBALS['sandbox_hook_count'][$sf] ) ) {
+						$GLOBALS['sandbox_hook_count'][$sf] += 1;
+					} else {
+						$GLOBALS['sandbox_hook_count'][$sf] = 1;
+					}
+					if ( ! empty( $GLOBALS['sandbox_hook_time'][$sf] ) ) {
+						$GLOBALS['sandbox_hook_time'][$sf] += $elap;
+					} else {
+						$GLOBALS['sandbox_hook_time'][$sf] = $elap;
+					}
+
+					// Log, sometimes
+					$do_log = $elap > 25 && empty( $GLOBALS['sandbox_req_hook_logging_suppressed'] );
+					// Idea: Always log a specific hook
+					// if ( $this->hook_name === 'init' ) { $do_log = true; }
+					if ( $do_log ) {
+						$elap = round( $elap );
+						if ( function_exists( 'sandbox_error_log' ) ) {
+							sandbox_error_log( "    hook: {$elap}ms | {$this->hook_name} -> $f()" );
+						} else {
+							$link = "$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
+							if ( strpos( $link, '?' ) !== false ) {
+									$link = substr( $link, 0, strpos( $link, '?' ) );
+							}
+							error_log( "{$elap}ms | {$this->hook_name} => $f() | $link" );
+						}
+					}
+				}
 			}
 		} while ( false !== next( $this->iterations[ $nesting_level ] ) );
 
